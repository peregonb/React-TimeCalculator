{"version":3,"sources":["assets/img/backspase.svg","components/Calculator/Button.jsx","components/Calculator/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","ref","useRef","className","classList","onClick","current","add","setTimeout","remove","buttonClick","value","Calculator","useState","inputValue","setInputValue","prevValue","setPrevValue","outputValue","setOutputValue","historyValue","setHistoryValue","operator","setOperator","error","setError","equalDisabled","setEqualDisabled","numberClick","num","numbers","numbersTransformed","parseInt","toString","transform","match","split","concat","length","arrNumbers","arr1","Array","from","result","arr","index","newItem","slice","join","useEffect","operatorClick","op","equalClick","convertToMinutes","hours","minutes","math","Math","floor","convertToExpression","num1","num2","minutesResult","readOnly","placeholder","src","backspace","alt","spliced","backspaceClick","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb60c7c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backspase.17f8a12e.svg\";","import React, {useRef} from \"react\";\r\n\r\nexport const Button = props => {\r\n    const ref = useRef();\r\n    const buttonClick = () => {\r\n        let classList = ref.current.classList;\r\n        classList.add(\"active\");\r\n        setTimeout(() => {\r\n            classList.remove(\"active\");\r\n        }, 70);\r\n    };\r\n\r\n    return (\r\n        <div ref={ref}\r\n             className={`button${props.classList ? \" \" + props.classList : \"\"}`}\r\n             onClick={() => {\r\n                 buttonClick();\r\n                 props.onClick();\r\n             }}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport backspace from \"../../assets/img/backspase.svg\";\r\nimport {Button} from \"./Button\";\r\nimport * as math from 'mathjs';\r\n\r\nexport const Calculator = () => {\r\n\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let [prevValue, setPrevValue] = useState(\"\");\r\n    let [outputValue, setOutputValue] = useState(\"\");\r\n    let [historyValue, setHistoryValue] = useState(\"\");\r\n    let [operator, setOperator] = useState(\"\");\r\n    let [error, setError] = useState(\"\");\r\n    let [equalDisabled, setEqualDisabled] = useState(\"\");\r\n\r\n    // useEffect(() => {\r\n    //     console.table({inputValue, prevValue, outputValue, historyValue, operator, error, equalDisabled})\r\n    // }, [inputValue, prevValue, outputValue, historyValue, operator, error, equalDisabled]);\r\n\r\n    const insert = (arr, index, newItem) => [\r\n        ...arr.slice(0, index),\r\n        newItem,\r\n        ...arr.slice(index)\r\n    ];\r\n\r\n    const numberClick = (num) => {\r\n        if (!(inputValue === \"000\" && num === \"0\")) {\r\n            setError(\"\");\r\n            let numbers;\r\n            numbers = inputValue.match(/[:]/) ? (inputValue.split(/[:]/)[0].concat(inputValue.split(/[:]/)[1])) + num : inputValue + num;\r\n            let transform = (num) => parseInt(num).toString(),\r\n                numbersTransformed = transform(numbers);\r\n            if (numbersTransformed.length < 9) {\r\n                setInputValue(numbers);\r\n                let arrNumbers;\r\n                arrNumbers = () => {\r\n                    if (numbersTransformed.length === 1) {\r\n                        return \"00\" + numbersTransformed;\r\n                    } else if (numbersTransformed.length === 2) {\r\n                        return \"0\" + numbersTransformed;\r\n                    } else if (numbersTransformed.length >= 3) {\r\n                        return numbersTransformed;\r\n                    }\r\n                };\r\n                let arr1 = Array.from(arrNumbers());\r\n                let result = insert(arr1, arr1.length - 2, \":\").join('');\r\n                setOutputValue(result);\r\n            } else {\r\n                setError(\"Maximum 8 digits accepted\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const clear = () => {\r\n        setInputValue(\"\");\r\n        setOutputValue(\"\");\r\n        setHistoryValue(\"\");\r\n        setError(\"\");\r\n        setOperator(\"\");\r\n        setPrevValue(\"\");\r\n        setEqualDisabled(\"\");\r\n    };\r\n\r\n    const backspaceClick = () => {\r\n        let spliced = outputValue.split(/[:]/)[0].concat(outputValue.split(/[:]/)[1]).slice(),\r\n            result,\r\n            length = spliced.length;\r\n\r\n        if (outputValue.length > 4) {\r\n            result = spliced.slice(0, length - 3) + \":\" + spliced.slice(length - 3, length - 1);\r\n        } else if (outputValue.length === 4) {\r\n            result = \"0:\" + spliced.slice(length - 3, length - 1);\r\n        } else if (outputValue.length === 3) {\r\n            result = \"0:\" + spliced.slice(length - 2, length - 1);\r\n        } else if (outputValue.length <= 2) {\r\n            result = \"\"\r\n        }\r\n        setOutputValue(result);\r\n        setInputValue(result);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setPrevValue(historyValue + \" \" + operator);\r\n    }, [historyValue, operator]);\r\n\r\n    const operatorClick = (op) => {\r\n        if (outputValue !== \"\") {\r\n            setInputValue(\"\");\r\n            setOperator(op);\r\n            setOutputValue(\"\");\r\n            setHistoryValue(outputValue);\r\n            setEqualDisabled(\"\");\r\n\r\n            equalClick();\r\n        }\r\n        else{\r\n            setOperator(op);\r\n        }\r\n    };\r\n\r\n    const convertToMinutes = (num) => {\r\n        let hours = num.split(/[:]/)[0];\r\n        let minutes = num.split(/[:]/)[1];\r\n        return parseInt(math.evaluate((parseInt(hours) * 60) + parseInt(minutes)));\r\n    };\r\n\r\n    const minutesResult = (num1, operator, num2) => {\r\n        return math.evaluate(parseInt(num1) + operator + parseInt(num2));\r\n    };\r\n\r\n    const convertToExpression = (num) => {\r\n        let hours = Math.floor(num / 60);\r\n        let minutes = num - hours * 60;\r\n        if (minutes.toString().length === 1) {\r\n            minutes = '0' + minutes;\r\n        }\r\n        return hours + \":\" + minutes;\r\n    };\r\n\r\n    const equalClick = () => {\r\n        if (operator !== \"\" && outputValue !== \"\") {\r\n            let result = convertToExpression(minutesResult(convertToMinutes(historyValue), operator, convertToMinutes(outputValue)));\r\n            if (result.match(/[-]/)) {\r\n                setError(\"Time couldn't be negative\");\r\n            }\r\n            setInputValue(convertToMinutes(result).toString());\r\n            setOutputValue(result);\r\n            setHistoryValue(\"\");\r\n            setOperator(\"\");\r\n            setEqualDisabled(\" pressed\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <span className=\"errorMessage\">{error}</span>\r\n            <span className=\"prevValue\">{prevValue}</span>\r\n            <input readOnly={true} placeholder={\"0:00\"} className=\"input big\" value={outputValue}/>\r\n            <div className=\"section\">\r\n                <Button value=\"7\" onClick={() => {\r\n                    numberClick(\"7\")\r\n                }}/>\r\n                <Button value=\"8\" onClick={() => {\r\n                    numberClick(\"8\")\r\n                }}/>\r\n                <Button value=\"9\" onClick={() => {\r\n                    numberClick(\"9\")\r\n                }}/>\r\n                <Button value={<img src={backspace} alt={\"backspace\"}/>} onClick={() => {\r\n                    backspaceClick();\r\n                }}/>\r\n                <Button value=\"4\" onClick={() => {\r\n                    numberClick(\"4\")\r\n                }}/>\r\n                <Button value=\"5\" onClick={() => {\r\n                    numberClick(\"5\")\r\n                }}/>\r\n                <Button value=\"6\" onClick={() => {\r\n                    numberClick(\"6\")\r\n                }}/>\r\n                <Button\r\n                    value=\"-\" onClick={() => {\r\n                    operatorClick(\"-\")\r\n                }}/>\r\n                <Button value=\"1\" onClick={() => {\r\n                    numberClick(\"1\")\r\n                }}/>\r\n                <Button value=\"2\" onClick={() => {\r\n                    numberClick(\"2\")\r\n                }}/>\r\n                <Button value=\"3\" onClick={() => {\r\n                    numberClick(\"3\")\r\n                }}/>\r\n                <Button\r\n                    value=\"+\" onClick={() => {\r\n                    operatorClick(\"+\")\r\n                }}/>\r\n                <Button value=\"0\" classList=\"double\" onClick={() => {\r\n                    numberClick(\"0\")\r\n                }}/>\r\n                <Button value=\"C\" onClick={() => {\r\n                    clear();\r\n                }}/>\r\n                <Button classList={equalDisabled} value=\"=\" onClick={() => {\r\n                    equalClick();\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport \"./assets/scss/App.scss\";\r\nimport {Calculator} from \"./components/Calculator/Calculator\";\r\n\r\nconst App = () => (\r\n    <Calculator/>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}