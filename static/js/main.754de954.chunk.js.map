{"version":3,"sources":["assets/img/backspase.svg","components/CalculatorOld.jsx","components/Calculator/Button.jsx","components/Calculator/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Button","props","ref","useRef","className","classList","onClick","current","add","setTimeout","remove","buttonClick","value","Calculator","useState","inputValue","setInputValue","prevValue","setPrevValue","outputValue","setOutputValue","historyValue","setHistoryValue","operator","setOperator","error","setError","operatorDisabled","setOperatorDisabled","equalDisabled","setEqualDisabled","numberClick","num","numbers","numbersTransformed","parseInt","toString","transform","match","split","concat","length","arrNumbers","arr1","Array","from","result","arr","index","newItem","slice","join","useEffect","operatorClick","op","readOnly","placeholder","src","backspace","alt","spliced","backspaceClick","convertToMinutes","hours","minutes","math","Math","floor","convertToExpression","num1","num2","minutesResult","equalClick","App","exact","path","process","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.754de954.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backspase.17f8a12e.svg\";","import React from \"react\";\r\nimport * as math from 'mathjs';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass CalculatorOld extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            valueInput: 0,\r\n            valueHidden: 0,\r\n            ifOperator: false,\r\n            operator: null,\r\n            valueHistory: 0,\r\n            timeFunc: false,\r\n            targetClass: null,\r\n            timeFuncClass: \"\",\r\n            hourDisable: false,\r\n            minuteDisable: false,\r\n            equalDisable: false,\r\n            error: \"\"\r\n        };\r\n        this.newRef = React.createRef();\r\n    };\r\n\r\n\r\n    clearValue = () => {\r\n        this.setState({\r\n            valueInput: 0,\r\n            valueHidden: 0,\r\n            ifOperator: false,\r\n            operator: null,\r\n            valueHistory: 0,\r\n            timeFunc: false,\r\n            timeFuncClass: \"\",\r\n            hourDisable: false,\r\n            minuteDisable: false,\r\n            equalDisable: false,\r\n            error: \"\"\r\n        });\r\n\r\n        this.scrollEnd(this.newRef.current);\r\n    };\r\n\r\n\r\n    ifDot = (str) => {\r\n        const regex = /\\W/g;\r\n        let m;\r\n        let arr = [];\r\n\r\n        while ((m = regex.exec(str)) !== null) {\r\n            if (m.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n            arr.push(m);\r\n            return arr.length;\r\n        }\r\n\r\n    };\r\n\r\n    number = num => {\r\n        let number = parseFloat(num);\r\n        let matched = (num) => {\r\n            if (num.toString().match(/0./) === null) {\r\n                return false\r\n            } else return num.match(/0./).length\r\n        };\r\n        let baseFunc = () => {\r\n            if (number === 0 && !this.state.valueInput) {\r\n                this.setState({\r\n                    valueInput: num,\r\n                });\r\n            } else if (parseInt(this.state.valueInput) === 0 && !matched(this.state.valueInput)) {\r\n                this.setState({\r\n                    valueInput: num,\r\n                });\r\n            } else if (matched(this.state.valueInput)) {\r\n                this.setState({\r\n                    valueInput: this.state.valueInput + num,\r\n                });\r\n            } else {\r\n                (async () => {\r\n                    let response = await this.setState({valueInput: this.state.valueInput + num});\r\n                    if (this.state.valueInput === \"7452\") {\r\n                        this.setState({redirect: true});\r\n                    }\r\n                    return response;\r\n                })();\r\n            }\r\n        };\r\n        if (this.state.ifOperator === false) {\r\n            baseFunc();\r\n        } else {\r\n            baseFunc();\r\n            this.setState({\r\n                valueInput: number,\r\n                ifOperator: false,\r\n                hourDisable: false,\r\n                minuteDisable: false\r\n            });\r\n        }\r\n\r\n        this.scrollEnd(this.newRef.current);\r\n    };\r\n    dot = () => {\r\n        if (!this.ifDot(this.state.valueInput)) {\r\n            this.setState({\r\n                valueInput: this.state.valueInput + \".\"\r\n            });\r\n        }\r\n        this.scrollEnd(this.newRef.current);\r\n    };\r\n    mathOperator = (op) => {\r\n        if (this.state.valueHidden === 0) {\r\n            this.setState({\r\n                valueHidden: this.state.valueInput,\r\n                ifOperator: true,\r\n                operator: op,\r\n            });\r\n        } else {\r\n            let statement = math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput));\r\n            this.setState({\r\n                valueHidden: statement,\r\n                valueInput: statement,\r\n                ifOperator: true,\r\n                valueHistory: statement,\r\n                operator: op,\r\n                equalDisable: false\r\n            });\r\n\r\n        }\r\n        this.scrollEnd(this.newRef.current);\r\n    };\r\n    equal = () => {\r\n        if (this.state.timeFunc === false) {\r\n            let statement = math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput));\r\n            this.setState({\r\n                valueHidden: 0,\r\n                valueInput: statement,\r\n                ifOperator: false,\r\n                valueHistory: statement,\r\n                operator: null\r\n            });\r\n            if (this.state.operator === '/' && parseFloat(this.state.valueInput) === 0) {\r\n                this.setState({error: \"ну, ты шалун)\"})\r\n            }\r\n        } else {\r\n            if (this.state.timeFunc === true && !this.ifAny(this.state.valueInput)) {\r\n                this.setState({error: \"Введи переменную часа или минуты\"})\r\n            } else {\r\n                let transformExpression = (expression) => {\r\n                    console.log(expression)\r\n                    if (expression.match(/[H]/) && expression.match(/[M]/)) {\r\n                        let re = /[M]/;\r\n                        let arr = expression.split(re);\r\n                        if (arr[1] === \"\") {\r\n                            return expression;\r\n                        } else {\r\n                            return arr[1] + arr[0] + \"M\"\r\n                        }\r\n                    } else if (!expression.match(/[H]/) && expression.match(/[M]/)) {\r\n                        return \"0H\" + expression\r\n                    } else if (expression.match(/[H]/) && !expression.match(/[M]/)) {\r\n                        return expression + \"M\"\r\n                    } else {\r\n                        return this.setState({equalDisable: true});\r\n                    }\r\n                };\r\n                let toStatement = (firstValue, secondValue) => {\r\n                    let re = /[HM]/;\r\n                    let arr1 = firstValue.split(re);\r\n                    let arr2 = secondValue.split(re);\r\n                    let secondsFirst = (+arr1[0]) * 60 * 60 + (+arr1[1]) * 60;\r\n                    let secondsSecond = (+arr2[0]) * 60 * 60 + (+arr2[1]) * 60;\r\n                    return math.evaluate(parseInt(secondsFirst) + this.state.operator + parseInt(secondsSecond));\r\n                };\r\n                let toDate = (num) => {\r\n                    let hours = parseInt((num / 60) / 60);\r\n                    let minutes = num / 60 - (hours * 60);\r\n                    if (hours === 0 && minutes !== 0) {\r\n                        return minutes + \"M\"\r\n                    } else if (minutes === 0 && hours !== 0) {\r\n                        return hours + \"H\"\r\n                    } else if (minutes === 0 && hours === 0) {\r\n                        return 0;\r\n                    } else {\r\n                        return hours + \"H\" + minutes + \"M\"\r\n                    }\r\n                };\r\n\r\n                let statement = toStatement(transformExpression(this.state.valueHidden), transformExpression(this.state.valueInput));\r\n\r\n                this.setState({\r\n                    // valueHidden: this.state.valueInputHistory,\r\n                    valueInput: toDate(statement),\r\n                    // valueHistory: his,\r\n                    equalDisable: true,\r\n                    error: \"\"\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        this.scrollEnd(this.newRef.current);\r\n    };\r\n    scrollEnd = (elem) => {\r\n        elem.scrollLeft = elem.scrollWidth\r\n    };\r\n\r\n    ifHour = (num) => {\r\n        if (num.toString().match(/H/) === null) {\r\n            return false\r\n        } else {\r\n            return num.toString().match(/H/).length\r\n        }\r\n    };\r\n    ifMinute = (num) => {\r\n        if (num.toString().match(/M/) === null) {\r\n            return false\r\n        } else return num.toString().match(/M/).length\r\n    };\r\n    ifAny = num => {\r\n        if (num.toString().match(/[HM]/) === null) {\r\n            return false\r\n        } else return num.toString().match(/[HM]/).length\r\n    };\r\n\r\n    hour = () => {\r\n        if (!this.ifHour(this.state.valueInput)) {\r\n            this.setState({\r\n                valueInput: this.state.valueInput + \"H\",\r\n                timeFunc: true,\r\n                timeFuncClass: \"time\",\r\n                hourDisable: true\r\n            });\r\n        }\r\n    };\r\n\r\n    minute = () => {\r\n        if (!this.ifMinute(this.state.valueInput)) {\r\n            this.setState({\r\n                valueInput: this.state.valueInput + \"M\",\r\n                timeFunc: true,\r\n                timeFuncClass: \"time\",\r\n                minuteDisable: true\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    addClass = (e) => {\r\n        e.target.classList.add('active');\r\n        this.setState({\r\n            targetClass: e.target\r\n        });\r\n    };\r\n    removeClass = (el) => {\r\n        if (el) {\r\n            el.classList.remove('active');\r\n        }\r\n    };\r\n    buttonClick = (e) => {\r\n        this.addClass(e);\r\n        setTimeout(() => {\r\n            this.removeClass(this.state.targetClass);\r\n            this.setState({targetClass: null});\r\n        }, 100)\r\n    };\r\n\r\n\r\n    render() {\r\n        let app = this.state.redirect ? <Redirect to={process.env.PUBLIC_URL + \"/calculator\"}/> : (\r\n            <div className={\"App \" + this.state.timeFuncClass}>\r\n                <span className=\"errorMessage\">{this.state.error}</span>\r\n                <div className=\"input\">{this.state.valueInput}</div>\r\n                <input ref={this.newRef} readOnly type=\"text\" className=\"output\" value={this.state.valueHistory}/>\r\n                <div className=\"section\">\r\n                    <div className=\"button\" onClick={(e) => {\r\n                        this.clearValue();\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        C\r\n                    </div>\r\n                    <div className={this.state.hourDisable ? \"button disabled\" : \"button\"} onClick={(e) => {\r\n                        this.hour();\r\n                        this.buttonClick(e)\r\n                    }}>H\r\n                    </div>\r\n                    <div className={this.state.minuteDisable ? \"button disabled\" : \"button\"} onClick={(e) => {\r\n                        this.minute();\r\n                        this.buttonClick(e)\r\n                    }}>M\r\n                    </div>\r\n                    <div className=\"button ifTimeDisable\" operator=\"/\" onClick={e => {\r\n                        this.mathOperator(e.target.getAttribute(\"operator\"));\r\n                        this.buttonClick(e)\r\n                    }}>÷\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        7\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        8\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        9\r\n                    </div>\r\n                    <div className=\"button ifTimeDisable\" operator=\"*\" onClick={e => {\r\n                        this.mathOperator(e.target.getAttribute(\"operator\"));\r\n                        this.buttonClick(e)\r\n                    }}>×\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        4\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        5\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        6\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.mathOperator(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>-\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        1\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        2\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>\r\n                        3\r\n                    </div>\r\n                    <div className=\"button\" onClick={e => {\r\n                        this.mathOperator(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>+\r\n                    </div>\r\n                    <div className=\"button double\" onClick={e => {\r\n                        this.number(e.target.innerHTML);\r\n                        this.buttonClick(e)\r\n                    }}>0\r\n                    </div>\r\n                    <div className=\"button ifTimeDisable\" onClick={(e) => {\r\n                        this.dot();\r\n                        this.buttonClick(e)\r\n                    }}>,\r\n                    </div>\r\n                    <div className={this.state.equalDisable ? \"button disabled\" : \"button\"} onClick={(e) => {\r\n                        this.equal();\r\n                        this.buttonClick(e)\r\n                    }}>=\r\n                    </div>\r\n                </div>\r\n            </div>);\r\n        return (\r\n            app\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearValue();\r\n    }\r\n}\r\n\r\nexport default CalculatorOld;\r\n","import React, {useRef} from \"react\";\r\n\r\nexport const Button = props => {\r\n    const ref = useRef();\r\n    const buttonClick = () => {\r\n        let classList = ref.current.classList;\r\n        classList.add(\"active\");\r\n        setTimeout(() => {\r\n            classList.remove(\"active\");\r\n        }, 70);\r\n    };\r\n\r\n    return (\r\n        <div ref={ref}\r\n             className={`button${props.classList ? \" \" + props.classList : \"\"}`}\r\n             onClick={() => {\r\n                 buttonClick();\r\n                 props.onClick();\r\n             }}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport backspace from \"../../assets/img/backspase.svg\";\r\nimport {Button} from \"./Button\";\r\nimport * as math from 'mathjs';\r\n\r\nexport const Calculator = () => {\r\n\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let [prevValue, setPrevValue] = useState(\"\");\r\n    let [outputValue, setOutputValue] = useState(\"\");\r\n    let [historyValue, setHistoryValue] = useState(\"\");\r\n    let [operator, setOperator] = useState(\"\");\r\n    let [error, setError] = useState(\"\");\r\n    let [operatorDisabled, setOperatorDisabled] = useState(\"\");\r\n    let [equalDisabled, setEqualDisabled] = useState(\"\");\r\n\r\n    const insert = (arr, index, newItem) => [\r\n        ...arr.slice(0, index),\r\n        newItem,\r\n        ...arr.slice(index)\r\n    ];\r\n\r\n    const numberClick = (num) => {\r\n        if (!(inputValue === \"000\" && num === \"0\")) {\r\n            setError(\"\");\r\n            setOperatorDisabled(\"\");\r\n            let numbers;\r\n            numbers = inputValue.match(/[:]/) ? (inputValue.split(/[:]/)[0].concat(inputValue.split(/[:]/)[1])) + num : inputValue + num;\r\n            let transform = (num) => parseInt(num).toString(),\r\n                numbersTransformed = transform(numbers);\r\n            if (numbersTransformed.length < 9) {\r\n                setInputValue(numbers);\r\n                let arrNumbers;\r\n                arrNumbers = () => {\r\n                    if (numbersTransformed.length === 1) {\r\n                        return \"00\" + numbersTransformed;\r\n                    } else if (numbersTransformed.length === 2) {\r\n                        return \"0\" + numbersTransformed;\r\n                    } else if (numbersTransformed.length >= 3) {\r\n                        return numbersTransformed;\r\n                    }\r\n                };\r\n                let arr1 = Array.from(arrNumbers());\r\n                let result = insert(arr1, arr1.length - 2, \":\").join('');\r\n                setOutputValue(result);\r\n            } else {\r\n                setError(\"Максимально 8 значений\")\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    const clear = () => {\r\n        setInputValue(\"\");\r\n        setOutputValue(\"\");\r\n        setHistoryValue(\"\");\r\n        setError(\"\");\r\n        setOperator(\"\");\r\n        setPrevValue(\"\");\r\n        setOperatorDisabled(\"\");\r\n        setEqualDisabled(\"\");\r\n    };\r\n\r\n    const backspaceClick = () => {\r\n        let spliced = outputValue.split(/[:]/)[0].concat(outputValue.split(/[:]/)[1]).slice(),\r\n            result,\r\n            length = spliced.length;\r\n\r\n        if (outputValue.length > 4) {\r\n            result = spliced.slice(0, length - 3) + \":\" + spliced.slice(length - 3, length - 1);\r\n        } else if (outputValue.length === 4) {\r\n            result = \"0:\" + spliced.slice(length - 3, length - 1);\r\n        } else if (outputValue.length === 3) {\r\n            result = \"0:\" + spliced.slice(length - 2, length - 1);\r\n        } else if (outputValue.length <= 2) {\r\n            result = \"\"\r\n        }\r\n        setOutputValue(result);\r\n        setInputValue(result);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setPrevValue(historyValue + \" \" + operator);\r\n    }, [historyValue, operator]);\r\n\r\n    useEffect(() => {\r\n        if (operator !== \"\") {\r\n            setOperatorDisabled(\" pressed\");\r\n        }\r\n    }, [outputValue]);\r\n\r\n\r\n    const operatorClick = (op) => {\r\n            setInputValue(\"\");\r\n            setOperator(op);\r\n            setHistoryValue(outputValue);\r\n            setEqualDisabled(\"\");\r\n    };\r\n\r\n    const equalClick = () => {\r\n        let convertToMinutes = (num) => {\r\n                let hours = num.split(/[:]/)[0];\r\n                let minutes = num.split(/[:]/)[1];\r\n                return parseInt(math.evaluate((parseInt(hours) * 60) + parseInt(minutes)));\r\n            },\r\n            minutesResult = (num1, operator, num2) => {\r\n                return math.evaluate(parseInt(num1) + operator + parseInt(num2));\r\n            },\r\n            convertToExpression = (num) => {\r\n                let hours = Math.floor(num / 60);\r\n                let minutes = num - hours * 60;\r\n                if (minutes.toString().length === 1) {\r\n                    minutes = '0' + minutes;\r\n                }\r\n                return hours + \":\" + minutes;\r\n            };\r\n        if (operator !== \"\" && outputValue !== \"\") {\r\n            let result = convertToExpression(minutesResult(convertToMinutes(historyValue), operator, convertToMinutes(outputValue)));\r\n            if (result.match(/[-]/)) {\r\n                setError(\"Time couldn't be negative\");\r\n            }\r\n            setOutputValue(result);\r\n            setHistoryValue(\"\");\r\n            setOperator(\"\");\r\n            setEqualDisabled(\" pressed\");\r\n            setOperatorDisabled(\"\");\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <span className=\"errorMessage\">{error}</span>\r\n            <span className=\"prevValue\">{prevValue}</span>\r\n            <input readOnly={true} placeholder={\"0:00\"} className=\"input big\" value={outputValue}/>\r\n            <div className=\"section\">\r\n                <Button value=\"7\" onClick={() => {\r\n                    numberClick(\"7\")\r\n                }}/>\r\n                <Button value=\"8\" onClick={() => {\r\n                    numberClick(\"8\")\r\n                }}/>\r\n                <Button value=\"9\" onClick={() => {\r\n                    numberClick(\"9\")\r\n                }}/>\r\n                <Button value={<img src={backspace} alt={\"backspace\"}/>} onClick={() => {\r\n                    backspaceClick();\r\n                }}/>\r\n                <Button value=\"4\" onClick={() => {\r\n                    numberClick(\"4\")\r\n                }}/>\r\n                <Button value=\"5\" onClick={() => {\r\n                    numberClick(\"5\")\r\n                }}/>\r\n                <Button value=\"6\" onClick={() => {\r\n                    numberClick(\"6\")\r\n                }}/>\r\n                <Button classList={operatorDisabled} value=\"-\" onClick={() => {\r\n                    operatorClick(\"-\")\r\n                }}/>\r\n                <Button value=\"1\" onClick={() => {\r\n                    numberClick(\"1\")\r\n                }}/>\r\n                <Button value=\"2\" onClick={() => {\r\n                    numberClick(\"2\")\r\n                }}/>\r\n                <Button value=\"3\" onClick={() => {\r\n                    numberClick(\"3\")\r\n                }}/>\r\n                <Button classList={operatorDisabled} value=\"+\" onClick={() => {\r\n                    operatorClick(\"+\")\r\n                }}/>\r\n                <Button value=\"0\" classList=\"double\" onClick={() => {\r\n                    numberClick(\"0\")\r\n                }}/>\r\n                <Button value=\"C\" onClick={() => {\r\n                    clear();\r\n                }}/>\r\n                <Button classList={equalDisabled} value=\"=\" onClick={() => {\r\n                    equalClick();\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport \"./assets/scss/App.scss\";\r\nimport CalculatorOld from \"./components/CalculatorOld\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Calculator} from \"./components/Calculator/Calculator\";\r\n\r\nconst App = () => (\r\n    <BrowserRouter>\r\n        {/*<Route exact path={process.env.PUBLIC_URL + '/calculator'} render={() => <CalculatorOld/>}/>*/}\r\n        <Route exact path={process.env.PUBLIC_URL + '/'} render={() => <Calculator/>}/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}