{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","clearValue","setState","valueInput","valueHidden","ifOperator","operator","valueHistory","timeFunc","scrollEnd","newRef","current","ifDot","str","m","regex","arr","exec","index","lastIndex","push","length","number","num","parseFloat","matched","toString","match","baseFunc","state","parseInt","dot","mathOperator","op","statement","math","equal","settings","ifHour","ifMinute","HoursToMin","replace","ifBoth","elem","scrollLeft","scrollWidth","console","log","hour","minute","addClass","e","target","classList","add","targetClass","removeClass","el","remove","buttonClick","setTimeout","React","createRef","window","this","className","ref","readOnly","type","value","onClick","getAttribute","innerHTML","Component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e843746.chunk.js","sourcesContent":["import React from \"react\";\nimport * as math from 'mathjs';\nimport \"./App.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            valueInput: 0,\n            valueHidden: 0,\n            ifOperator: false,\n            operator: null,\n            valueHistory: 0,\n            timeFunc: false,\n            targetClass: null\n        };\n        this.newRef = React.createRef();\n    }\n\n\n    clearValue = () => {\n        this.setState({\n            valueInput: 0,\n            valueHidden: 0,\n            ifOperator: false,\n            operator: null,\n            valueHistory: 0,\n            timeFunc: false\n        });\n\n        this.scrollEnd(this.newRef.current);\n    };\n\n\n    ifDot = (str) => {\n        const regex = /\\W/g;\n        let m;\n        let arr = [];\n\n        while ((m = regex.exec(str)) !== null) {\n            if (m.index === regex.lastIndex) {\n                regex.lastIndex++;\n            }\n            arr.push(m);\n            return arr.length;\n        }\n\n    }\n\n    number = num => {\n        let number = parseFloat(num);\n        let matched = (num) => {\n            if (num.toString().match(/0./) === null) {\n                return false\n            } else return num.match(/0./).length\n        }\n\n        let baseFunc = () => {\n            if (number === 0 && !this.state.valueInput) {\n                this.setState({\n                    valueInput: num,\n                });\n            } else if (parseInt(this.state.valueInput) === 0 && !matched(this.state.valueInput)) {\n                this.setState({\n                    valueInput: num,\n                });\n            } else if (matched(this.state.valueInput)) {\n                this.setState({\n                    valueInput: this.state.valueInput + num,\n                });\n            } else {\n                this.setState({\n                    valueInput: this.state.valueInput + num,\n                });\n            }\n        }\n\n        if (this.state.ifOperator === false) {\n            baseFunc();\n        } else {\n            baseFunc();\n            this.setState({\n                valueInput: number,\n                ifOperator: false\n            });\n        }\n\n        this.scrollEnd(this.newRef.current);\n    };\n    dot = () => {\n        if (!this.ifDot(this.state.valueInput)) {\n            this.setState({\n                valueInput: this.state.valueInput + \".\"\n            });\n        }\n        this.scrollEnd(this.newRef.current);\n    };\n\n    mathOperator = (op) => {\n        if (this.state.valueHidden === 0) {\n            this.setState({\n                valueHidden: this.state.valueInput,\n                ifOperator: true,\n                operator: op,\n            });\n        } else {\n            let statement = math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput));\n            this.setState({\n                valueHidden: statement,\n                valueInput: statement,\n                ifOperator: true,\n                valueHistory: statement,\n                operator: op\n            });\n\n        }\n        this.scrollEnd(this.newRef.current);\n    };\n\n    equal = () => {\n        if (this.state.timeFunc === false) {\n            let statement = math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput));\n            this.setState({\n                valueHidden: 0,\n                valueInput: statement,\n                ifOperator: false,\n                valueHistory: statement,\n                operator: null\n            });\n        } else {\n            let settings = (statement) => {\n                this.setState({\n                    valueHidden: 0,\n                    valueInput: statement + 'лю',\n                    ifOperator: false,\n                    valueHistory: this.state.valueInput + \"=\" + statement + 'лю',\n                    operator: null\n                });\n            }\n            if (this.ifHour(this.state.valueInput) && !this.ifMinute(this.state.valueInput)) {\n                // debugger\n                let HoursToMin = this.state.valueInput.replace(/лД/, '*60');\n                let statement = math.evaluate(HoursToMin);\n                settings(statement);\n            } else if (this.ifBoth(this.state.valueInput)) {\n                // debugger\n                let HoursToMin = this.state.valueInput.replace(/лД/, '*60+').replace(/лю/, '.0');\n                let statement = math.evaluate(HoursToMin);\n                settings(statement);\n            }\n\n        }\n\n\n        this.scrollEnd(this.newRef.current);\n    };\n\n    scrollEnd = (elem) => {\n        elem.scrollLeft = elem.scrollWidth\n    }\n\n\n    ifHour = (num) => {\n        if (num.toString().match(/лД/) === null) {\n            return false\n        } else {\n            console.log(num.toString().match(/лД/))\n            return num.toString().match(/лД/).length\n        }\n    }\n    ifMinute = (num) => {\n        if (num.toString().match(/лю/) === null) {\n            return false\n        } else return num.toString().match(/лю/).length\n    }\n    ifBoth = (num) => {\n        if (num.toString().match(/лД/) === null) {\n            return false\n        } else if (num.toString().match(/лю/) === null) {\n            return false;\n        } else return num.toString().match(/лД/).length\n    }\n    hour = () => {\n        if (!this.ifHour(this.state.valueInput)) {\n            this.setState({\n                valueInput: this.state.valueInput + \"лД\",\n                timeFunc: true\n            });\n        }\n\n    }\n    minute = () => {\n        if (!this.ifMinute(this.state.valueInput)) {\n            this.setState({\n                valueInput: this.state.valueInput + \"лю\",\n                timeFunc: true\n            });\n        }\n\n    }\n    addClass = (e) => {\n        e.target.classList.add('active');\n        this.setState({\n            targetClass: e.target\n        });\n    }\n    removeClass = (el) => {\n        el.classList.remove('active');\n    }\n    buttonClick = (e) => {\n        this.addClass(e);\n        setTimeout(() => {\n            this.removeClass(this.state.targetClass);\n            this.setState({targetClass: null});\n        }, 100)\n    }\n\n\n    render() {\n        window.state = this.state;\n        return (\n            <div className=\"App\">\n                <div className=\"input\">{this.state.valueInput}</div>\n                <input ref={this.newRef} readOnly type=\"text\" className=\"output\" value={this.state.valueHistory}/>\n                <div className=\"section\">\n                    <div className=\"button\" onClick={(e) => {\n                        this.clearValue();\n                        this.buttonClick(e)\n                    }}>\n                        C\n                    </div>\n                    <div className=\"button\" onClick={(e) => {\n                        this.hour();\n                        this.buttonClick(e)\n                    }}>лД\n                    </div>\n                    <div className=\"button\" onClick={(e) => {\n                        this.minute();\n                        this.buttonClick(e)\n                    }}>лю\n                    </div>\n                    <div className=\"button\" operator=\"/\" onClick={e => {\n                        this.mathOperator(e.target.getAttribute(\"operator\"));\n                        this.buttonClick(e)\n                    }}>├и\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        7\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        8\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        9\n                    </div>\n                    <div className=\"button\" operator=\"*\" onClick={e => {\n                        this.mathOperator(e.target.getAttribute(\"operator\"));\n                        this.buttonClick(e)\n                    }}>├Ќ\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        4\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        5\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        6\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.mathOperator(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>-\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        1\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        2\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>\n                        3\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.mathOperator(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>+\n                    </div>\n                    <div className=\"button double\" onClick={e => {\n                        this.number(e.target.innerHTML);\n                        this.buttonClick(e)\n                    }}>0\n                    </div>\n                    <div className=\"button\" onClick={(e) => {\n                        this.dot();\n                        this.buttonClick(e)\n                    }}>,\n                    </div>\n                    <div className=\"button\" onClick={(e) => {\n                        this.equal();\n                        this.buttonClick(e)\n                    }}>=\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}