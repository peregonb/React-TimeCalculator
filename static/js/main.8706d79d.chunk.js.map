{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","clearValue","setState","valueInput","valueHidden","ifOperator","operator","valueHistory","parseMath","number","num","baseFunc","parseInt","state","indexOf","dot","mathOperator","op","math","parseFloat","split","equal","window","this","document","addEventListener","console","log","className","onClick","e","target","getAttribute","innerHTML","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8706d79d.chunk.js","sourcesContent":["import React from \"react\";\nimport * as math from 'mathjs';\nimport \"./App.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            valueInput: 0,\n            valueHidden: 0,\n            ifOperator: false,\n            operator: null,\n            valueHistory: 0\n        };\n    }\n\n    clearValue = () => {\n        this.setState({\n            valueInput: 0,\n            valueHidden: 0,\n            ifOperator: false,\n            operator: null,\n            valueHistory: 0\n        });\n    };\n\n    parseMath = () => {\n\n    }\n\n    number = num => {\n        let baseFunc = () => {\n            if (parseInt(this.state.valueInput) === 0 && !((this.state.valueInput + \"\").indexOf(\".\") > 0)) {\n                this.setState({\n                    valueInput: parseInt(num),\n                    valueHistory: parseInt(num)\n                });\n            } else {\n                this.setState({\n                    valueInput: this.state.valueInput + num,\n                    valueHistory: this.state.valueHistory + num\n                });\n            }\n        }\n\n        if (this.state.ifOperator === false) {\n            baseFunc();\n        } else {\n            baseFunc();\n            this.setState({\n                valueInput: num,\n                ifOperator: false\n            });\n\n        }\n    };\n    dot = () => {\n        if (!((this.state.valueInput + \"\").indexOf(\".\") > 0)) {\n            if (parseInt(this.state.valueInput) === 0) {\n                this.setState({\n                    valueInput: \"0.\"\n                });\n            } else {\n                this.setState({\n                    valueInput: this.state.valueInput + \".\"\n                });\n            }\n        }\n    };\n\n    mathOperator = (op) => {\n        // debugger\n        if (this.state.valueHidden === 0) {\n            if (parseInt(this.state.valueInput) === 0) {\n                this.clearValue()\n            } else {\n                if (op === '/' || op === '*') {\n                    this.setState({\n                        valueHidden: this.state.valueInput,\n                        ifOperator: true,\n                        operator: op,\n                        valueHistory: this.state.valueHistory + op\n                    });\n                } else {\n                    this.setState({\n                        valueHidden: this.state.valueInput,\n                        ifOperator: true,\n                        operator: op,\n                        valueHistory: this.state.valueHistory + op\n                    });\n                }\n            }\n        } else {\n            if (parseInt(this.state.valueInput) === 0) {\n                this.clearValue();\n            } else {\n                this.setState({\n                    valueHidden: math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput)).split(8),\n                    valueInput: math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput)).split(8),\n                    ifOperator: true,\n                    operator: op\n                });\n            }\n        }\n\n    };\n\n    equal = () => {\n        if (parseInt(this.state.valueInput) === 0) {\n            this.clearValue()\n        } else {\n            this.setState({\n                valueHidden: math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput)),\n                valueInput: math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput)),\n                ifOperator: false,\n                valueHistory: this.state.valueHistory + \"=\" + math.evaluate(parseFloat(this.state.valueHidden) + this.state.operator + parseFloat(this.state.valueInput))\n            });\n        }\n        this.setState({\n            valueHidden: 0,\n            ifOperator: false,\n            operator: null\n        });\n    };\n\n    render() {\n        window.state = this.state;\n        document.addEventListener('click', function () {\n            console.log(window.state)\n        }, false);\n        return (\n            <div className=\"App\">\n                <div className=\"input\">{this.state.valueInput}</div>\n                <div className=\"output\">{this.state.valueHistory}</div>\n                <div className=\"section\">\n                    <div className=\"button\" onClick={this.clearValue}>\n                        C\n                    </div>\n                    <div className=\"button\">Ч</div>\n                    <div className=\"button\">М</div>\n                    <div className=\"button\" operator=\"/\" onClick={e => {\n                        this.mathOperator(e.target.getAttribute(\"operator\"))\n                    }}>÷\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        7\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        8\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        9\n                    </div>\n                    <div className=\"button\" operator=\"*\" onClick={e => {\n                        this.mathOperator(e.target.getAttribute(\"operator\"))\n                    }}>×\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        4\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        5\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        6\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.mathOperator(e.target.innerHTML)\n                    }}>-\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        1\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        2\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>\n                        3\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.mathOperator(e.target.innerHTML)\n                    }}>+\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>0\n                    </div>\n                    <div className=\"button\" onClick={e => {\n                        this.number(e.target.innerHTML)\n                    }}>00\n                    </div>\n                    <div className=\"button\" onClick={this.dot}>,\n                    </div>\n                    <div className=\"button\" onClick={this.equal}>=</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}